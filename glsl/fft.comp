#version 430

layout(local_size_x = 16, local_size_y = 16) in;

layout(std430, binding = 0) buffer DensityBuffer {
    float density[];
};

layout(std430, binding = 1) buffer PotentialBuffer {
    float potential[];
};

layout(std430, binding = 2) buffer TempBuffer {
    vec2 temp[];
};

uniform int width;
uniform int height;
uniform int stage;
uniform int direction; // 0 for forward, 1 for inverse
uniform float gConstant;

const float PI = 3.14159265359;

vec2 complexMul(vec2 a, vec2 b) {
    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

vec2 complexExp(float angle) {
    return vec2(cos(angle), sin(angle));
}

void main() {
    uint x = gl_GlobalInvocationID.x;
    uint y = gl_GlobalInvocationID.y;

    if (x >= width || y >= height) return;

    uint index = y * width + x;

    if (stage == 0) {
        // Initialize: Copy density to temp buffer as complex numbers
        temp[index] = vec2(density[index], 0.0);
    }
    else if (stage == 1) {
        // FFT X direction
        uint N = width;
        uint logN = uint(log2(float(N)));

        for (uint s = 1; s <= logN; s++) {
            uint m = 1 << s;
            uint m2 = m >> 1;

            vec2 wm = complexExp(direction == 0 ? -2.0 * PI / float(m) : 2.0 * PI / float(m));

            barrier();

            if ((x & (m - 1)) < m2) {
                uint k = x & ~(m - 1);
                uint j = x & (m2 - 1);

                vec2 w = complexExp((direction == 0 ? -2.0 : 2.0) * PI * float(j) / float(m));

                uint evenIdx = y * width + k + j;
                uint oddIdx = y * width + k + j + m2;

                vec2 t = complexMul(w, temp[oddIdx]);
                vec2 u = temp[evenIdx];

                temp[evenIdx] = vec2(u.x + t.x, u.y + t.y);
                temp[oddIdx] = vec2(u.x - t.x, u.y - t.y);
            }
        }
    }
    else if (stage == 2) {
        // FFT Y direction
        uint N = height;
        uint logN = uint(log2(float(N)));

        for (uint s = 1; s <= logN; s++) {
            uint m = 1 << s;
            uint m2 = m >> 1;

            barrier();

            if ((y & (m - 1)) < m2) {
                uint k = y & ~(m - 1);
                uint j = y & (m2 - 1);

                vec2 w = complexExp((direction == 0 ? -2.0 : 2.0) * PI * float(j) / float(m));

                uint evenIdx = (k + j) * width + x;
                uint oddIdx = (k + j + m2) * width + x;

                vec2 t = complexMul(w, temp[oddIdx]);
                vec2 u = temp[evenIdx];

                temp[evenIdx] = vec2(u.x + t.x, u.y + t.y);
                temp[oddIdx] = vec2(u.x - t.x, u.y - t.y);
            }
        }
    }
    else if (stage == 3) {
        // Solve Poisson equation in Fourier space
        float kx = float(x);
        if (x > width / 2) kx = float(int(x) - int(width));

        float ky = float(y);
        if (y > height / 2) ky = float(int(y) - int(height));

        float kxFactor = 2.0 * PI / float(width);
        float kyFactor = 2.0 * PI / float(height);

        float kSquared = (kx * kxFactor) * (kx * kxFactor) + (ky * kyFactor) * (ky * kyFactor);

        if (kSquared == 0.0) {
            temp[index] = vec2(0.0, 0.0);
        } else {
            float scalingFactor = -2.0 * PI * gConstant / kSquared;
            temp[index] *= scalingFactor;
        }
    }
    else if (stage == 4) {
        // Copy result back to potential buffer (real part only)
        if (direction == 1) {
            // Normalize after inverse FFT
            potential[index] = temp[index].x / float(width * height);
        }
    }
}